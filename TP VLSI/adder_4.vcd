$date
  Wed Oct 13 11:48:08 2021
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$var reg 4 ! a[3:0] $end
$var reg 4 " b[3:0] $end
$var reg 4 # s[3:0] $end
$var reg 1 $ cin $end
$var reg 1 % cout $end
$scope module adder_4 $end
$var reg 4 & a[3:0] $end
$var reg 4 ' b[3:0] $end
$var reg 1 ( cin $end
$var reg 4 ) s[3:0] $end
$var reg 1 * cout $end
$var reg 5 + c[4:0] $end
$scope module fa0 $end
$var reg 1 , a $end
$var reg 1 - b $end
$var reg 1 . cin $end
$var reg 1 / s $end
$var reg 1 0 cout $end
$upscope $end
$scope module fa1 $end
$var reg 1 1 a $end
$var reg 1 2 b $end
$var reg 1 3 cin $end
$var reg 1 4 s $end
$var reg 1 5 cout $end
$upscope $end
$scope module fa2 $end
$var reg 1 6 a $end
$var reg 1 7 b $end
$var reg 1 8 cin $end
$var reg 1 9 s $end
$var reg 1 : cout $end
$upscope $end
$scope module fa3 $end
$var reg 1 ; a $end
$var reg 1 < b $end
$var reg 1 = cin $end
$var reg 1 > s $end
$var reg 1 ? cout $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
b0000 !
b0001 "
b0010 #
1$
0%
b0000 &
b0001 '
1(
b0010 )
0*
b0001U +
0,
1-
1.
0/
10
01
02
13
14
05
06
07
08
09
0:
0;
0<
0=
0>
0?
#20000000
b1111 !
b0000 #
0$
1%
b1111 &
0(
b0000 )
1*
b1111U +
1,
0.
11
04
15
16
18
09
1:
1;
1=
0>
1?
#40000000
